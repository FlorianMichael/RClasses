plugins {
    id "java-library"
}

configurations {
    implementation.extendsFrom exportToJar
    api.extendsFrom exportToJar
}

dependencies {
    exportToJar project(":RClasses-common")
    exportToJar project(":RClasses-functional")
    exportToJar project(":RClasses-io")
    exportToJar project(":RClasses-math")
    exportToJar project(":RClasses-pattern")
    exportToJar project(":RClasses-kotlin-support")
}

jar {
    // Add all dependencies which are included using "exportToJar" to the jar file and exclude the META-INF folder
    dependsOn configurations.exportToJar
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.exportToJar.collect {
            zipTree(it)
        }
    }
    // Rename the project's license file to LICENSE_<project_name> to avoid conflicts
    from("LICENSE") {
        rename {
            "${it}_${project.archivesBaseName}"
        }
    }
}

allprojects {
    apply plugin: "java-library"

    base {
        group = project.maven_group
        version = project.maven_version
        description = project.maven_description
    }

    repositories {
        mavenCentral()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }

        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "signing"

    archivesBaseName = "RClasses-" + project.name

    java {
        withSourcesJar()
        withJavadocJar()
    }

    publishing {
        repositories {
            maven {
                name = "reposilite"
                def releasesUrl = "https://maven.lenni0451.net/releases"
                def snapshotsUrl = "https://maven.lenni0451.net/snapshots"
                url = project.version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }
            maven {
                name = "ossrh"
                def releasesUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = project.version.endsWith("SNAPSHOT") ? snapshotsUrl : releasesUrl

                credentials(PasswordCredentials)
                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name
                version = project.version

                from components.java

                pom {
                    name = artifactId
                    description = project.description
                    url = "https://github.com/FlorianMichael/RClasses"
                    licenses {
                        license {
                            name = "Apache-2.0 license"
                            url = "https://github.com/FlorianMichael/RClasses/blob/main/LICENSE"
                        }
                    }
                    developers {
                        developer {
                            id = "FlorianMichael"
                            name = "EnZaXD"
                            email = "florian.michael07@gmail.com"
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/FlorianMichael/RClasses.git"
                        developerConnection = "scm:git:ssh://github.com/FlorianMichael/RClasses.git"
                        url = "github.com/FlorianMichael/RClasses"
                    }
                }
            }
        }
    }

    signing {
        setRequired false
        sign configurations.archives
        sign publishing.publications.maven
    }

    project.tasks.withType(PublishToMavenRepository).forEach {
        it.dependsOn(project.tasks.withType(Sign))
    }

}
